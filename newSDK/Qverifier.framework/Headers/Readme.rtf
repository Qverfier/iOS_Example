{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;
\red43\green131\blue159;\red15\green104\blue160;\red163\green21\blue21;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c100000;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c16900\c51200\c62500;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c63900\c8200\c8200;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 This framework is used for authenticate user\'92s login by using Missed Call , OTP and Voice OTP.\
As per apple guideline , Apple did not provide call verifying library .\
\
So, Here we are using CallKit to know about call using following CallKit delegate.\
\
First : Import call kit in AppDelegate \
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2 \cb3 import\cf4  CallKit\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \cb1 \
Second : Add Delegate Method for getting call Observation. Here we set the value in user default whenever call will be disconnected . \
 \
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2 \cb3 extension\cf4  \cf5 AppDelegate\cf4 : \cf5 CXCallObserverDelegate\cf4  \{\
    \cf2 func\cf4  \cf6 callObserver\cf4 (\cf2 _\cf4  callObserver: \cf5 CXCallObserver\cf4 , callChanged call: \cf5 CXCall\cf4 ) \{\
        \cf2 if\cf4  call.\cf5 hasEnded\cf4  \cf5 ==\cf4  \cf2 true\cf4  \{\
            \cf5 print\cf4 (\cf7 "Disconnected"\cf4 )\
            \
            \cf5 UserDefaults\cf4 .\cf5 standard\cf4 .\cf5 set\cf4 (\cf7 "true"\cf4 , forKey: \cf7 "call"\cf4 )\
            \cf5 UserDefaults\cf4 .\cf5 standard\cf4 .\cf5 synchronize\cf4 ()\
        \}\
        \cf2 if\cf4  call.\cf5 isOutgoing\cf4  \cf5 ==\cf4  \cf2 true\cf4  \cf5 &&\cf4  call.\cf5 hasConnected\cf4  \cf5 ==\cf4  \cf2 false\cf4  \{\
            \cf5 print\cf4 (\cf7 "Dialing"\cf4 )\
        \}\
        \cf2 if\cf4  call.\cf5 isOutgoing\cf4  \cf5 ==\cf4  \cf2 false\cf4  \cf5 &&\cf4  call.\cf5 hasConnected\cf4  \cf5 ==\cf4  \cf2 false\cf4  \cf5 &&\cf4  call.\cf5 hasEnded\cf4  \cf5 ==\cf4  \cf2 false\cf4  \{\
            \cf5 print\cf4 (\cf7 "Incoming"\cf4 )\
        \}\
\
        \cf2 if\cf4  call.\cf5 hasConnected\cf4  \cf5 ==\cf4  \cf2 true\cf4  \cf5 &&\cf4  call.\cf5 hasEnded\cf4  \cf5 ==\cf4  \cf2 false\cf4  \{\
            \cf5 print\cf4 (\cf7 "Connected"\cf4 )\
        \}\
    \}\
\}\
\
\
=> Whenever you will using the SDK, You need to call MainEntryVC for moving forward and pass the some basic information.\
\
        \cf2 let\cf4  vc = \cf5 MainEntryVC\cf4 ()\
        vc.\cf5 isFrom\cf4  = \cf7 "MISSED_CALL"\cf4 \
        vc.\cf5 strDeviceID\cf4  = \cf7 \'93Device ID\'94\cf4 \
        vc.\cf5 strSecretKey\cf4  = \cf7 \'93SDK SecretKey \'93\cf4 \
        vc.\cf5 strAppKey\cf4  = \cf7 \'93SDK\'94 App Key\cf4 \
\
\
Then you will move to first page of the SDK.\
\
\
\
=> If you don\'92t want to use this SDK UI .. You can make call method with provided some basic information.\
\
isForm will be : \'93MISSED_CALL\'94,\cf7 "SMS\'94,"VOICE_OTP"\cf4 \
\
Calling Method :\
  \cf5 ServerManager\cf4 ().\cf5 callServiceForSDK\cf4 (appKey: \cf7 \'93AppKey\'94\cf4 , secretKey: \cf7 \'93S\'94ecretKey\cf4 , mobile: \cf2 \'93mobile Number\'94\cf4 , isfrom: \cf2 \'93is from\'94\cf4 , deviceId: \cf7 \'93Device \'93Id\cf4 , vc: \cf2 UIViewController\cf4 )\
\
And get response in following methods\
    	\cf2 func\cf4  \cf6 sdk_successBlock\cf4 (result:\cf5 AnyObject\cf4 !)\
 	\cf2 func\cf4  \cf6 sdk_errorBlock\cf4 (error:\cf5 NSError\cf4 )\
}